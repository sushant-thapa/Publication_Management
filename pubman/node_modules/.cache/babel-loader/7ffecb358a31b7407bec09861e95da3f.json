{"ast":null,"code":"var _jsxFileName = \"/home/sandesh/projects/pubman/src/components/formgenerator_component/formgenerator.js\";\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { fieldList } from '../../database/fieldList';\nimport { Table, TableBody, TableRow, TableCell, TextField, Radio } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport addPublication from '../../database/insert';\n\nclass FormGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputChange = id => event => {\n      var name = id;\n      var value = event.target.value;\n      this.state.formData[name] = value;\n    };\n\n    console.log(\"Constructor called.\");\n    this.state = {\n      fieldList: '',\n      compulsoryFields: [],\n      type: '',\n      formData: {}\n    };\n    this.state.type = this.props.type;\n    this.state.formData.type = this.props.type;\n    this.state.fieldList = fieldList[0].bookFields;\n    this.handleProp = this.handleProp.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.inputChange = this.inputChange.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.handleProp();\n  }\n\n  handleProp() {\n    console.log(\"HandleProp called.\");\n    console.log(this.state.type);\n\n    switch (this.state.type) {\n      case 'book':\n        {\n          this.setState({\n            fieldList: fieldList[0].bookFields\n          });\n          break;\n        }\n\n      case 'journal':\n        {\n          this.setState({\n            fieldList: fieldList[0].journalArticleFields\n          });\n          break;\n        }\n\n      case 'chapter':\n        {\n          this.setState({\n            fieldList: fieldList[0].bookChapterFields\n          });\n          break;\n        }\n\n      case 'proceeding':\n        {\n          this.setState({\n            fieldList: fieldList[0].proceedingFields\n          });\n          break;\n        }\n\n      case 'article':\n        {\n          this.setState({\n            fieldList: fieldList[0].articleFields\n          });\n          break;\n        }\n\n      case 'report':\n        {\n          this.setState({\n            fieldList: fieldList[0].reportFields\n          });\n          break;\n        }\n\n      case 'misc':\n        {\n          this.setState({\n            fieldList: fieldList[0].miscellaneousFields\n          });\n          break;\n        }\n    } // Push all the required fields into an array for form validation.\n\n\n    var temp = [];\n    this.state.fieldList.map((key, index) => {\n      if (key.required) {\n        temp.push(key.id);\n      }\n    }); // Setstate not working in array. Please fix this. :'( \n\n    this.state.compulsoryFields = temp;\n    console.log(\"Changed the state a/c the prop.\");\n  }\n\n  handleSubmit() {\n    console.log(this.state.formData);\n    console.log(\"Submit button clicked.\");\n    var returnArray = this.validateForm();\n\n    if (returnArray.length == 0) {\n      // process record into a database.\n      // TRY for now -_-\n      var retVal = addPublication(this.state.formData);\n      alert(\"Record added successfully to database.\");\n    } else {\n      // Some fields are missing. Print them.\n      console.log(\"Empty Required field: \", returnArray[0]);\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.state.type = newProps.type;\n    console.log(\"Set a new prop type. \", newProps.type);\n    this.state.formData.type = newProps.type;\n    this.handleProp();\n  }\n\n  validateForm() {\n    // Check for all the required fields in the state data.\n    // For any fields that are non existent or empty, push and return as array.\n    // If the array length is 0, then it means all fields are filled. Else, fields need filling.\n    var failedFields = [];\n    this.state.compulsoryFields.map((item, index) => {\n      if (!this.state.formData[item] || this.state.formData[item] === \"\") {\n        failedFields.push(item);\n      }\n    });\n    return failedFields;\n  }\n\n  render() {\n    var context = this;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Enter the information related to \", this.props.type, \".\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"( \", React.createElement(\"span\", {\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"*\"), \" denotes a required field )\"), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.fieldList.map(function (item, index) {\n      return React.createElement(TableRow, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, item.description, item.required && React.createElement(\"span\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"*\")), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Radio, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"ranked\"), React.createElement(TextField, {\n        required: item.required,\n        name: \"somename\",\n        id: \"someid\",\n        className: \"someClassName\",\n        key: index,\n        onChange: context.inputChange(item.id),\n        placeholder: \"Begin typing...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })));\n    }), React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"large\",\n      color: \"primary\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Submit.\")))))));\n  }\n\n}\n\nexport default FormGenerator;","map":{"version":3,"sources":["/home/sandesh/projects/pubman/src/components/formgenerator_component/formgenerator.js"],"names":["React","Typography","fieldList","Table","TableBody","TableRow","TableCell","TextField","Radio","Button","addPublication","FormGenerator","Component","constructor","props","inputChange","id","event","name","value","target","state","formData","console","log","compulsoryFields","type","bookFields","handleProp","bind","handleSubmit","validateForm","setState","journalArticleFields","bookChapterFields","proceedingFields","articleFields","reportFields","miscellaneousFields","temp","map","key","index","required","push","returnArray","length","retVal","alert","componentWillReceiveProps","newProps","failedFields","item","render","context","color","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport {fieldList} from '../../database/fieldList';\nimport {Table,  TableBody, TableRow, TableCell, TextField, Radio } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport addPublication from '../../database/insert';\n\nclass FormGenerator extends React.Component{\n    constructor(props){\n        super(props);\n        console.log(\"Constructor called.\");\n        this.state = {\n            fieldList: '',\n            compulsoryFields: [],\n            type: '',\n            formData : {},\n        }\n\n        this.state.type = this.props.type;\n        this.state.formData.type = this.props.type;\n        this.state.fieldList = fieldList[0].bookFields;\n\n        this.handleProp = this.handleProp.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.inputChange = this.inputChange.bind(this);\n        this.validateForm = this.validateForm.bind(this);\n        this.handleProp();\n    }\n    \n    inputChange = id => event => {\n        var name = id;\n        var value = event.target.value;\n        this.state.formData[name] = value;\n    }\n\n    handleProp(){\n        console.log(\"HandleProp called.\");\n        console.log(this.state.type);\n        switch(this.state.type){\n            case 'book':{\n                this.setState({fieldList: fieldList[0].bookFields});\n                break;\n            }\n            case 'journal':{\n                this.setState({fieldList: fieldList[0].journalArticleFields});\n                break;\n            }\n            case 'chapter':{\n                this.setState({fieldList: fieldList[0].bookChapterFields});\n                break;\n            }\n            case 'proceeding':{\n                this.setState({fieldList: fieldList[0].proceedingFields});\n                break;\n            }\n            case 'article':{\n                this.setState({fieldList: fieldList[0].articleFields});\n                break;\n            }\n            case 'report':{\n                this.setState({fieldList: fieldList[0].reportFields});\n                break;\n            }\n\n            case 'misc':{\n                this.setState({fieldList: fieldList[0].miscellaneousFields});\n                break;\n            }\n        }\n        // Push all the required fields into an array for form validation.\n        var temp = [];\n        this.state.fieldList.map((key, index)=>{\n            if(key.required) {\n                temp.push(key.id);\n            }\n        });\n        // Setstate not working in array. Please fix this. :'( \n        this.state.compulsoryFields = temp;\n        console.log(\"Changed the state a/c the prop.\");\n    }\n    \n    handleSubmit(){\n        console.log(this.state.formData);\n        console.log(\"Submit button clicked.\");\n        var returnArray = this.validateForm();\n        if(returnArray.length == 0){\n            // process record into a database.\n            // TRY for now -_-\n            var retVal = addPublication(this.state.formData);\n            alert(\"Record added successfully to database.\");\n        }\n        else{\n            // Some fields are missing. Print them.\n            console.log(\"Empty Required field: \", returnArray[0]);\n        }\n    }\n\n    componentWillReceiveProps(newProps ){\n        this.state.type = newProps.type;\n        console.log(\"Set a new prop type. \", newProps.type);\n        this.state.formData.type = newProps.type;\n        this.handleProp();\n    }\n\n    validateForm(){\n        // Check for all the required fields in the state data.\n        // For any fields that are non existent or empty, push and return as array.\n        // If the array length is 0, then it means all fields are filled. Else, fields need filling.\n        var failedFields = [];\n        this.state.compulsoryFields.map((item, index)=>{\n            if(!this.state.formData[item] || this.state.formData[item] === \"\"){\n                failedFields.push(item);\n            }\n        })\n        return failedFields;\n    }\n\n    render(){\n        var context = this;\n        return(\n            <div> \n                <div>\n                    <Typography>\n                        Enter the information related to {this.props.type}.\n                    </Typography>\n                    <br />\n                    <Typography>\n                        ( <span style = {{color: 'red'}}>*</span> denotes a required field )\n                    </Typography>\n                    <Table>\n                        <TableBody>\n                            { this.state.fieldList.map(function(item, index){\n                                return (\n                                    <TableRow key = {index}>\n                                        <TableCell>\n                                            {item.description}\n                                            {item.required && <span style = {{color: 'red'}}>*</span> }\n                                        </TableCell>\n                                        <TableCell>\n                                            <Radio>ranked</Radio>\n                                            <TextField \n                                            required = {item.required}\n                                            name = \"somename\"\n                                            id = \"someid\"\n                                            className = \"someClassName\"\n                                            key = {index}\n                                            onChange = {context.inputChange(item.id)} placeholder = \"Begin typing...\" />\n                                        </TableCell>\n                                    </TableRow>\n                                );   \n                            })}\n                            <TableRow>\n                                <TableCell></TableCell>\n                                <TableCell>\n                                    <Button size = \"large\" color = \"primary\" onClick = {this.handleSubmit}>\n                                        Submit.\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FormGenerator;"]},"metadata":{},"sourceType":"module"}