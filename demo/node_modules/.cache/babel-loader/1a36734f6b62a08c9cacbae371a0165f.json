{"ast":null,"code":"/**\n * Way data is stored for this database\n * For a Node.js/Node Webkit database it's the file system\n * For a browser-side database it's localforage, which uses the best backend available (IndexedDB then WebSQL then localStorage)\n *\n * This version is the browser version\n */\nvar localforage = require('localforage'); // Configure localforage to display NeDB name for now. Would be a good idea to let user use his own app name\n\n\nlocalforage.config({\n  name: 'NeDB',\n  storeName: 'nedbdata'\n});\n\nfunction exists(filename, callback) {\n  localforage.getItem(filename, function (err, value) {\n    if (value !== null) {\n      // Even if value is undefined, localforage returns null\n      return callback(true);\n    } else {\n      return callback(false);\n    }\n  });\n}\n\nfunction rename(filename, newFilename, callback) {\n  localforage.getItem(filename, function (err, value) {\n    if (value === null) {\n      localforage.removeItem(newFilename, function () {\n        return callback();\n      });\n    } else {\n      localforage.setItem(newFilename, value, function () {\n        localforage.removeItem(filename, function () {\n          return callback();\n        });\n      });\n    }\n  });\n}\n\nfunction writeFile(filename, contents, options, callback) {\n  // Options do not matter in browser setup\n  if (typeof options === 'function') {\n    callback = options;\n  }\n\n  localforage.setItem(filename, contents, function () {\n    return callback();\n  });\n}\n\nfunction appendFile(filename, toAppend, options, callback) {\n  // Options do not matter in browser setup\n  if (typeof options === 'function') {\n    callback = options;\n  }\n\n  localforage.getItem(filename, function (err, contents) {\n    contents = contents || '';\n    contents += toAppend;\n    localforage.setItem(filename, contents, function () {\n      return callback();\n    });\n  });\n}\n\nfunction readFile(filename, options, callback) {\n  // Options do not matter in browser setup\n  if (typeof options === 'function') {\n    callback = options;\n  }\n\n  localforage.getItem(filename, function (err, contents) {\n    return callback(null, contents || '');\n  });\n}\n\nfunction unlink(filename, callback) {\n  localforage.removeItem(filename, function () {\n    return callback();\n  });\n} // Nothing to do, no directories will be used on the browser\n\n\nfunction mkdirp(dir, callback) {\n  return callback();\n} // Nothing to do, no data corruption possible in the brower\n\n\nfunction ensureDatafileIntegrity(filename, callback) {\n  return callback(null);\n} // Interface\n\n\nmodule.exports.exists = exists;\nmodule.exports.rename = rename;\nmodule.exports.writeFile = writeFile;\nmodule.exports.crashSafeWriteFile = writeFile; // No need for a crash safe function in the browser\n\nmodule.exports.appendFile = appendFile;\nmodule.exports.readFile = readFile;\nmodule.exports.unlink = unlink;\nmodule.exports.mkdirp = mkdirp;\nmodule.exports.ensureDatafileIntegrity = ensureDatafileIntegrity;","map":null,"metadata":{},"sourceType":"script"}