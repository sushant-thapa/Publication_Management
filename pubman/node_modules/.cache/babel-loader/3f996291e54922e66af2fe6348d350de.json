{"ast":null,"code":"import _objectSpread from \"/home/sandesh/projects/pubman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/sandesh/projects/pubman/src/components/edit_component/edit.js\";\n\n/*\n    TODO: Check when params are empty and mutate page heading accordingly.\n    In short, do not let the user access /edit directly on the server.\n*/\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { fieldList } from '../../database/fieldList';\nimport { Table, TableBody, TableRow, TableCell, TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport TopBar from '../topbar_component/topbar';\nexport default class Edit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputChange = id => event => {\n      var name = id;\n      var value = event.target.value;\n      console.log(\"Changed value: \", value);\n      this.setState(prevState => ({\n        formData: _objectSpread({}, prevState.formData, {\n          [name]: value\n        })\n      }));\n      console.log(this.state.currentData);\n    };\n\n    this.handleProp = this.handleProp.bind(this);\n    this.getData = this.getData.bind(this);\n    this.inputChange = this.inputChange.bind(this);\n    this.state = {\n      articleID: '',\n      articleType: '',\n      fieldList: [],\n      formData: {}\n    };\n    this.state.articleID = this.props.location.id;\n    this.state.articleType = this.props.location.type;\n    console.log(this.state.articleType);\n    console.log(this.props.location.id);\n    this.handleProp();\n    this.getData();\n  }\n\n  getData() {\n    //  Fetch data according to id.\n    var context = this; // Initialize the database code here :)\n\n    var Datastore = require('nedb'),\n        db = new Datastore({\n      filename: \"/home/sandesh/totalData.txt\"\n    });\n\n    db.loadDatabase(function (err) {\n      if (err) {\n        alert(\"The database could not be loaded. The application cant work without this.\");\n      }\n    });\n    db.find({\n      _id: this.state.articleID\n    }, function (error, store) {\n      if (error) {\n        console.log(\"Error occured while loading the data.\");\n        return [];\n      }\n\n      context.setState({\n        formData: store[0]\n      });\n      console.log(\"State is: \", context.state.currentData);\n      console.log(\"Store is: \", store);\n    });\n  }\n\n  handleProp() {\n    console.log(\"HandleProp called.\");\n\n    switch (this.state.articleType) {\n      case 'book':\n        {\n          this.state.fieldList = fieldList[0].bookFields;\n          break;\n        }\n\n      case 'journal':\n        {\n          this.state.fieldList = fieldList[0].journalArticleFields;\n          break;\n        }\n\n      case 'chapter':\n        {\n          this.state.fieldList = fieldList[0].bookChapterFields;\n          break;\n        }\n\n      case 'proceeding':\n        {\n          this.state.fieldList = fieldList[0].proceedingFields;\n          break;\n        }\n\n      case 'research-paper':\n        {\n          this.state.fieldList = fieldList[0].researchPaperFields;\n          break;\n        }\n\n      case 'article':\n        {\n          this.state.fieldList = fieldList[0].periodicalArticleFields;\n          break;\n        }\n\n      case 'report':\n        {\n          this.setState({\n            fieldList: fieldList[0].reportFields\n          });\n          break;\n        }\n\n      default:\n        {\n          console.log(\"Invalid Choice for form selection. DO NOT TAMPER.\");\n          break;\n        }\n    } // Push all the required fields into an array for form validation.\n\n\n    var temp = [];\n    this.state.fieldList.map((key, index) => {\n      if (key.required) {\n        temp.push(key.id);\n      }\n    }); // Setstate not working in array. Please fix this. :'( \n\n    this.state.compulsoryFields = temp;\n    console.log(\"Changed the state a/c the prop.\");\n    console.log(this.state.fieldList);\n  }\n\n  handleSubmit() {}\n\n  render() {\n    var context = this;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(TopBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: 16,\n        width: '60%',\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.articleType != \"\" && \"Edit Information for \" + this.state.articleType || \"Please Do not access this page directly\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"( \", React.createElement(\"span\", {\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"*\"), \" denotes a required field )\"), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.state.fieldList.map(function (item, index) {\n      return React.createElement(TableRow, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, item.description, item.required && React.createElement(\"span\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"*\")), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        required: item.required,\n        name: \"somename\",\n        id: \"someid\",\n        className: \"someClassName\",\n        key: index,\n        value: context.state.formData[item.id] || \"\",\n        onChange: context.inputChange(item.id),\n        placeholder: \"Begin typing...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      })));\n    }), React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"large\",\n      color: \"primary\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Submit.\"))))))));\n  }\n\n}","map":{"version":3,"sources":["/home/sandesh/projects/pubman/src/components/edit_component/edit.js"],"names":["React","Typography","fieldList","Table","TableBody","TableRow","TableCell","TextField","Button","TopBar","Edit","Component","constructor","props","inputChange","id","event","name","value","target","console","log","setState","prevState","formData","state","currentData","handleProp","bind","getData","articleID","articleType","location","type","context","Datastore","require","db","filename","loadDatabase","err","alert","find","_id","error","store","bookFields","journalArticleFields","bookChapterFields","proceedingFields","researchPaperFields","periodicalArticleFields","reportFields","temp","map","key","index","required","push","compulsoryFields","handleSubmit","render","padding","width","margin","color","item","description"],"mappings":"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","sourcesContent":["/*\n    TODO: Check when params are empty and mutate page heading accordingly.\n    In short, do not let the user access /edit directly on the server.\n*/\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport {fieldList} from '../../database/fieldList';\nimport {Table,  TableBody, TableRow, TableCell, TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\n\nimport TopBar from '../topbar_component/topbar';\n\nexport default class Edit extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleProp = this.handleProp.bind(this);\n        this.getData = this.getData.bind(this);\n        this.inputChange = this.inputChange.bind(this);\n        this.state = {\n            articleID: '',\n            articleType: '',  \n            fieldList: [],\n            formData: {}\n        }\n        this.state.articleID = this.props.location.id;\n        this.state.articleType = this.props.location.type;\n        console.log(this.state.articleType);\n        console.log(this.props.location.id);\n        this.handleProp();\n        this.getData();\n    }\n\n    getData(){\n        //  Fetch data according to id.\n        var context = this;\n        // Initialize the database code here :)\n        var Datastore = require('nedb'), db = new Datastore({filename: \"/home/sandesh/totalData.txt\"});\n        db.loadDatabase(function(err){\n            if(err){\n                alert(\"The database could not be loaded. The application cant work without this.\");\n            }\n        })\n\n        db.find({_id: this.state.articleID}, function(error, store){\n            if(error){\n                console.log(\"Error occured while loading the data.\");\n                return [];\n            }\n            context.setState({formData: store[0]});\n            console.log(\"State is: \", context.state.currentData);\n            console.log(\"Store is: \", store);\n        })\n    }\n\n    handleProp(){\n        console.log(\"HandleProp called.\");\n        switch(this.state.articleType){\n            case 'book':{\n                this.state.fieldList = fieldList[0].bookFields;\n                break;\n            }\n            case 'journal':{\n                this.state.fieldList = fieldList[0].journalArticleFields;\n                break;\n            }\n            case 'chapter':{\n                this.state.fieldList = fieldList[0].bookChapterFields;\n                break;\n            }\n            case 'proceeding':{\n                this.state.fieldList = fieldList[0].proceedingFields;\n                break;\n            }\n            case 'research-paper':{\n                this.state.fieldList = fieldList[0].researchPaperFields;\n                break;\n            }\n            case 'article':{\n                this.state.fieldList = fieldList[0].periodicalArticleFields;\n                break;\n            }\n            case 'report':{\n                this.setState({fieldList: fieldList[0].reportFields});\n                break;\n            }\n            default:{\n                console.log(\"Invalid Choice for form selection. DO NOT TAMPER.\");\n                break;\n            }\n        }\n        // Push all the required fields into an array for form validation.\n        var temp = [];\n        this.state.fieldList.map((key, index)=>{\n            if(key.required) {\n                temp.push(key.id);\n            }\n        });\n        // Setstate not working in array. Please fix this. :'( \n        this.state.compulsoryFields = temp;\n        console.log(\"Changed the state a/c the prop.\");\n        console.log(this.state.fieldList);\n    }\n    \n    inputChange = id => event => {\n        var name = id;\n        var value = event.target.value;\n        console.log(\"Changed value: \", value);\n        this.setState(prevState=>({\n            formData:{\n                ...prevState.formData,\n                [name]: value\n            },\n        }));\n        console.log(this.state.currentData);\n    }\n\n    handleSubmit(){\n        \n    }\n    render(){\n        var context = this;\n        return(\n            <div>\n                <TopBar></TopBar>\n                \n            <div> \n                <div style = {{\n                    padding: 16,\n                    width: '60%',\n                    margin: \"auto\"\n                }}>\n                    <Typography>\n                        {\n                            (this.state.articleType != \"\" && \n                                \"Edit Information for \" + this.state.articleType\n                            )|| \"Please Do not access this page directly\"\n                        }\n                    </Typography>\n                    <br />\n                    <Typography>\n                        ( <span style = {{color: 'red'}}>*</span> denotes a required field )\n                    </Typography>\n                    <Table>\n                        <TableBody>\n                            { this.state.fieldList.map(function(item, index){\n                                return (\n                                    <TableRow key = {index}>\n                                        <TableCell>\n                                            {item.description}\n                                            {item.required && <span style = {{color: 'red'}}>*</span> }\n                                        </TableCell>\n                                        <TableCell>\n                                            <TextField \n                                            required = {item.required}\n                                            name = \"somename\"\n                                            id = \"someid\"\n                                            className = \"someClassName\"\n                                            key = {index}\n                                            value = {\n                                                context.state.formData[item.id] || \"\"\n                                            }\n                                            onChange = {context.inputChange(item.id)} placeholder = \"Begin typing...\" />\n                                        </TableCell>\n                                    </TableRow>\n                                );   \n                            })}\n                            <TableRow>\n                                <TableCell></TableCell>\n                                <TableCell>\n                                    <Button size = \"large\" color = \"primary\" onClick = {this.handleSubmit}>\n                                        Submit.\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </div>\n            </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}